[
  {
    "id": 26,
    "title": "Printing Hello World",
    "slug": "printing-hello-world",
    "short_description": "Create a function that prints 'Hello, world!' to the console using Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["print", "macro"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 22,
    "title": "Declaring Variables",
    "slug": "declaring-variables",
    "short_description": "Learn to declare immutable variables in Rust and understand their usage.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["variables", "immutability"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  },
  {
    "id": 23,
    "title": "Mutable Variables",
    "slug": "mutable-variables",
    "short_description": "Define and modify mutable variables in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["variables", "mutability"],
    "created_at": "2024-06-08T00:00:00Z",
    "updated_at": "2024-06-08T00:00:00Z"
  },
  {
    "id": 24,
    "title": "Constants",
    "slug": "constants",
    "short_description": "Learn how to define and use constants in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["constants", "definition"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 25,
    "title": "Primitive Data Types",
    "slug": "primitive-data-types",
    "short_description": "Get familiar with primitive data types in Rust by defining and annotating variables.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["data types", "basics"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 27,
    "title": "Converting Numerical Types",
    "slug": "converting-numerical-types",
    "short_description": "Implement a function to convert numerical types using the `as` keyword in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["conversion", "numerical types"],
    "created_at": "2024-06-10T00:00:00Z",
    "updated_at": "2024-06-10T00:00:00Z"
  },
  {
    "id": 3,
    "title": "Mathematical operations",
    "slug": "mathematical-operations",
    "short_description": "Practice mathematical operations in Rust, including addition, subtraction, multiplication, and division.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 28,
    "title": "Sum of Array",
    "slug": "sum-of-array",
    "short_description": "Calculate the sum of all elements in an array.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["arrays", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 29,
    "title": "Tuples",
    "slug": "tuples",
    "short_description": "Create a function that returns a tuple of values.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["tuples", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 30,
    "title": "The Unit Type",
    "slug": "the-unit-type",
    "short_description": "Understand and use the unit type `()` in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["unit type", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 31,
    "title": "Functions",
    "slug": "functions",
    "short_description": "Implement and work with functions in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["functions", "basics"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 32,
    "title": "Closures",
    "slug": "closures",
    "short_description": "Learn how to define and use closures in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["closures", "basics"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 33,
    "title": "Control Flow",
    "slug": "control-flow",
    "short_description": "Implement basic control flow in Rust using if-else statements.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["control flow", "if-else"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 10,
    "title": "Basic If-Else Statements",
    "slug": "if-else",
    "short_description": "Learn how to use if-else statements in Rust to control the flow of your program.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "if-else"],
    "created_at": "2024-06-01T00:00:00Z",
    "updated_at": "2024-06-01T00:00:00Z"
  },
  {
    "id": 11,
    "title": "Sum of Even Numbers",
    "slug": "sum-of-even-numbers",
    "short_description": "Implement a function to sum even numbers in a given range using a for loop.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["for-loop", "iteration", "range"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 12,
    "title": "Countdown",
    "slug": "countdown",
    "short_description": "Implement a countdown timer using a while loop in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["while", "loop", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 13,
    "title": "Weekday from Number",
    "slug": "weekday-from-number",
    "short_description": "Use Rust's pattern matching to determine the weekday given its number.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["pattern matching", "match", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 34,
    "title": "Ownership",
    "slug": "ownership",
    "short_description": "Understand and implement Rust's ownership model.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "lifetimes"],
    "created_at": "2024-06-13T00:00:00Z",
    "updated_at": "2024-06-13T00:00:00Z"
  },
  {
    "id": 35,
    "title": "Mutable References",
    "slug": "mutable-references",
    "short_description": "Implement Rust's ownership model with mutable references.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "mutable references"],
    "created_at": "2024-06-13T00:00:00Z",
    "updated_at": "2024-06-13T00:00:00Z"
  },
  {
    "id": 36,
    "title": "Ownership Rules",
    "slug": "ownership-rules",
    "short_description": "Identify and fix ownership rule violations in Rust code.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "fixing errors"],
    "created_at": "2024-06-14T00:00:00Z",
    "updated_at": "2024-06-14T00:00:00Z"
  },
  {
    "id": 2,
    "title": "Character counting string",
    "slug": "character-counting-string",
    "short_description": "Write a program that takes a string as input and counts the number of characters in the string.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 4,
    "title": "Fizz Buzz",
    "slug": "fizz-buzz",
    "short_description": "Write a program that prints 'Fizz' for multiples of three, 'Buzz' for multiples of five, and 'FizzBuzz' for multiples of both.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 5,
    "title": "Fibonacci",
    "slug": "fibonacci",
    "short_description": "Write a function that returns the nth number in the Fibonacci sequence.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 6,
    "title": "The From trait",
    "slug": "the-from-trait",
    "short_description": "Implement the From trait for a custom type.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-30T00:00:00Z",
    "updated_at": "2024-04-30T00:00:00Z"
  },
  {
    "id": 7,
    "title": "Animal sanctuary registry",
    "slug": "animal-sanctuary-registry",
    "short_description": "Create a program that manages a registry of animals in a sanctuary.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-30T00:00:00Z",
    "updated_at": "2024-04-30T00:00:00Z"
  },
  {
    "id": 8,
    "title": "Median and mode",
    "slug": "median-and-mode",
    "short_description": "Write a program that calculates the median and mode of a list of numbers.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-05-03T00:00:00Z",
    "updated_at": "2024-05-03T00:00:00Z"
  },
  {
    "id": 9,
    "title": "Graceful error handling",
    "slug": "graceful-error-handling",
    "short_description": "Implement graceful error handling in Rust using the Result type.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-05-06T00:00:00Z",
    "updated_at": "2024-05-06T00:00:00Z"
  },
  {
    "id": 14,
    "title": "Is Prime",
    "slug": "is-prime",
    "short_description": "Implement a function to check if a number is prime using logical operators and conditional statements.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "CONTROL_FLOW",
    "tags": [
      "primes",
      "number theory",
      "logical operators",
      "conditional statements"
    ],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 15,
    "title": "Determine Number Characteristics",
    "slug": "determine-number-characteristics",
    "short_description": "Implement a function to describe if a number is positive, negative, or zero, and if it is even or odd.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["conditions", "logical operators", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 16,
    "title": "Factorial Calculator",
    "slug": "factorial-calculator",
    "short_description": "Implement a function to calculate the factorial of a non-negative integer using early returns and loops.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 17,
    "title": "Temperature Converter",
    "slug": "temperature-converter",
    "short_description": "Implement a temperature converter that handles various units and errors.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "CONTROL_FLOW",
    "tags": ["conversion", "error handling", "conditionals"],
    "created_at": "2024-06-03T00:00:00Z",
    "updated_at": "2024-06-03T00:00:00Z"
  },
  {
    "id": 18,
    "title": "Validate User Input",
    "slug": "validate-user-input",
    "short_description": "Implement early returns in Rust to validate user input for age and email.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-06-03T00:00:00Z",
    "updated_at": "2024-06-03T00:00:00Z"
  },
  {
    "id": 19,
    "title": "Find the First Palindrome",
    "slug": "find-the-first-palindrome",
    "short_description": "Implement a function to find the first palindrome number in a range using any control flow construct.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "palindrome"],
    "created_at": "2024-06-05T00:00:00Z",
    "updated_at": "2024-06-05T00:00:00Z"
  },
  {
    "id": 20,
    "title": "Finite State Automaton",
    "slug": "finite-state-automaton",
    "short_description": "Implement a finite state automaton (FSA) to recognize a specific pattern in a sequence of characters.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "CONTROL_FLOW",
    "tags": ["pattern recognition", "automata theory", "control flow"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  },
  {
    "id": 21,
    "title": "Maze Solver",
    "slug": "maze-solver",
    "short_description": "Implement a maze solver using control flow in Rust to navigate through a maze represented as a grid.",
    "language": "RUST",
    "difficulty": "ADVANCED",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "algorithms", "path-finding"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  }
]
