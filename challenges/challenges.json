[
  {
    "id": 26,
    "title": "Printing Hello World",
    "slug": "printing-hello-world",
    "short_description": "Create a function that prints 'Hello, world!' to the console using Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["print", "macro"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 22,
    "title": "Declaring Variables",
    "slug": "declaring-variables",
    "short_description": "Learn to declare immutable variables in Rust and understand their usage.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["variables", "immutability"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  },
  {
    "id": 23,
    "title": "Mutable Variables",
    "slug": "mutable-variables",
    "short_description": "Define and modify mutable variables in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["variables", "mutability"],
    "created_at": "2024-06-08T00:00:00Z",
    "updated_at": "2024-06-08T00:00:00Z"
  },
  {
    "id": 24,
    "title": "Constants",
    "slug": "constants",
    "short_description": "Learn how to define and use constants in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["constants", "definition"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 25,
    "title": "Primitive Data Types",
    "slug": "primitive-data-types",
    "short_description": "Get familiar with primitive data types in Rust by defining and annotating variables.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["data types", "basics"],
    "created_at": "2024-06-09T00:00:00Z",
    "updated_at": "2024-06-09T00:00:00Z"
  },
  {
    "id": 27,
    "title": "Converting Numerical Types",
    "slug": "converting-numerical-types",
    "short_description": "Implement a function to convert numerical types using the `as` keyword in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["conversion", "numerical types"],
    "created_at": "2024-06-10T00:00:00Z",
    "updated_at": "2024-06-10T00:00:00Z"
  },
  {
    "id": 3,
    "title": "Mathematical operations",
    "slug": "mathematical-operations",
    "short_description": "Practice mathematical operations in Rust, including addition, subtraction, multiplication, and division.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 28,
    "title": "Sum of Array",
    "slug": "sum-of-array",
    "short_description": "Calculate the sum of all elements in an array.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["arrays", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 29,
    "title": "Tuples",
    "slug": "tuples",
    "short_description": "Create a function that returns a tuple of values.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["tuples", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 30,
    "title": "The Unit Type",
    "slug": "the-unit-type",
    "short_description": "Understand and use the unit type `()` in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["unit type", "basic operations"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 31,
    "title": "Functions",
    "slug": "functions",
    "short_description": "Implement and work with functions in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["functions", "basics"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 33,
    "title": "Control Flow",
    "slug": "control-flow",
    "short_description": "Implement basic control flow in Rust using if-else statements.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["control flow", "if-else"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 10,
    "title": "Basic If-Else Statements",
    "slug": "if-else",
    "short_description": "Learn how to use if-else statements in Rust to control the flow of your program.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "if-else"],
    "created_at": "2024-06-01T00:00:00Z",
    "updated_at": "2024-06-01T00:00:00Z"
  },
  {
    "id": 11,
    "title": "Sum of Even Numbers",
    "slug": "sum-of-even-numbers",
    "short_description": "Implement a function to sum even numbers in a given range using a for loop.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["for-loop", "iteration", "range"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 12,
    "title": "Countdown",
    "slug": "countdown",
    "short_description": "Implement a countdown timer using a while loop in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["while", "loop", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 13,
    "title": "Weekday from Number",
    "slug": "weekday-from-number",
    "short_description": "Use Rust's pattern matching to determine the weekday given its number.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["pattern matching", "match", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 34,
    "title": "Ownership",
    "slug": "ownership",
    "short_description": "Understand and implement Rust's ownership model.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "lifetimes"],
    "created_at": "2024-06-13T00:00:00Z",
    "updated_at": "2024-06-13T00:00:00Z"
  },
  {
    "id": 35,
    "title": "Mutable References",
    "slug": "mutable-references",
    "short_description": "Implement Rust's ownership model with mutable references.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "mutable references"],
    "created_at": "2024-06-13T00:00:00Z",
    "updated_at": "2024-06-13T00:00:00Z"
  },
  {
    "id": 36,
    "title": "Ownership Rules",
    "slug": "ownership-rules",
    "short_description": "Identify and fix ownership rule violations in Rust code.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["ownership", "borrowing", "fixing errors"],
    "created_at": "2024-06-14T00:00:00Z",
    "updated_at": "2024-06-14T00:00:00Z"
  },
  {
    "id": 2,
    "title": "Character counting string",
    "slug": "character-counting-string",
    "short_description": "Write a program that takes a string as input and counts the number of characters in the string.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 37,
    "title": "Slices",
    "slug": "slices",
    "short_description": "Find the largest element in a slice of integers.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["slices", "iterators", "collections"],
    "created_at": "2024-12-28T00:00:00Z",
    "updated_at": "2024-12-28T00:00:00Z"
  },
  {
    "id": 38,
    "title": "Mutable Slices",
    "slug": "mutable-slices",
    "short_description": "Manipulate elements in a mutable slice in-place using iteration.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["slices", "mutability", "iteration"],
    "created_at": "2024-12-28T00:00:00Z",
    "updated_at": "2024-12-28T00:00:00Z"
  },
  {
    "id": 39,
    "title": "Slice Manipulation",
    "slug": "slice-manipulation",
    "short_description": "Practice updating specific elements of a mutable slice in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["slices", "mutability", "arrays", "collections"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 40,
    "title": "Structs",
    "slug": "structs",
    "short_description": "Learn how to define and use structs in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["structs", "basics"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 41,
    "title": "Tuple Structs",
    "slug": "tuple-structs",
    "short_description": "Learn to define and use tuple structs in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["tuple structs", "basics"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 42,
    "title": "Constructors",
    "slug": "constructors",
    "short_description": "Learn to create constructors for Rust structs.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["structs", "methods", "constructors"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 43,
    "title": "Unit Structs",
    "slug": "unit-structs",
    "short_description": "Learn about unit structs and their use cases in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["structs", "unit struct"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 44,
    "title": "Methods on Structs",
    "slug": "methods-on-structs",
    "short_description": "Learn how to define and use methods on Rust structs.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["structs", "methods", "associated functions"],
    "created_at": "2024-12-29T00:00:00Z",
    "updated_at": "2024-12-29T00:00:00Z"
  },
  {
    "id": 45,
    "title": "Implementing Debug Trait for Structs",
    "slug": "derive-debug-for-structs",
    "short_description": "Learn to use Rust's `derive` attribute to implement the `Debug` trait for custom structs.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["debug", "traits", "derive"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 46,
    "title": "Enums",
    "slug": "enums",
    "short_description": "Learn how to use enums in Rust by implementing a basic TrafficLight enum.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["enums", "basic concepts"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 47,
    "title": "Playing Cards",
    "slug": "playing-cards",
    "short_description": "Learn how to use enums with unit and tuple variants by implementing a Card enum.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["enums", "basic concepts"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 48,
    "title": "Complex Enums",
    "slug": "complex-enums",
    "short_description": "Explore complex enums by combining unit, tuple, and named field variants in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["enums", "advanced concepts"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 49,
    "title": "Methods on Enums",
    "slug": "methods-on-enums",
    "short_description": "Learn how to define and use methods on Rust enums.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["enums", "methods"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 50,
    "title": "Deriving PartialEq",
    "slug": "derive-partial-eq",
    "short_description": "Learn how to use the derive macro to implement PartialEq for an enum.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["enums", "traits", "PartialEq", "derive"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 51,
    "title": "If Let Enums",
    "slug": "if-let-enums",
    "short_description": "Practice pattern matching on enums using `if let`.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["enums", "if let", "pattern matching"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 52,
    "title": "Vectors",
    "slug": "vectors",
    "short_description": "Perform basic operations on vectors in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["vectors", "collections", "Rust"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 53,
    "title": "Hashmaps",
    "slug": "hashmaps",
    "short_description": "Use Rust's HashMap to create a simple key-value store.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["hashmaps", "collections", "rust"],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 54,
    "title": "Student Grades Tracker",
    "slug": "student-grades-tracker",
    "short_description": "Manage student grades using structs and hashmaps without error handling.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [
      "structs",
      "hashmaps",
      "impl block",
      "mutable references",
      "immutable references"
    ],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 55,
    "title": "Student Grades Tracker 2",
    "slug": "student-grades-tracker-2",
    "short_description": "Extend the student grades system with methods inside the Student struct.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [
      "structs",
      "hashmaps",
      "methods",
      "mutable references",
      "immutable references"
    ],
    "created_at": "2024-12-30T00:00:00Z",
    "updated_at": "2024-12-30T00:00:00Z"
  },
  {
    "id": 56,
    "title": "Using Option<T> for Optional Values",
    "slug": "optional-values",
    "short_description": "Implement functions that work with optional values using Option<T>.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["option", "enums"],
    "created_at": "2024-12-31T00:00:00Z",
    "updated_at": "2024-12-31T00:00:00Z"
  },
  {
    "id": 9,
    "title": "Graceful error handling",
    "slug": "graceful-error-handling",
    "short_description": "Implement graceful error handling in Rust using the Result type.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-05-06T00:00:00Z",
    "updated_at": "2024-05-06T00:00:00Z"
  },
  {
    "id": 57,
    "title": "Graceful error handling 2",
    "slug": "graceful-error-handling-2",
    "short_description": "Enhance error handling by defining custom error types and implementing the `Error` trait.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["error handling", "enums", "traits"],
    "created_at": "2024-12-31T00:00:00Z",
    "updated_at": "2024-12-31T00:00:00Z"
  },
  {
    "id": 58,
    "title": "Error Propagation in File Handling",
    "slug": "error-propagation",
    "short_description": "Learn how to propagate errors while reading integers from a file in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["error handling", "file I/O", "Result type", "error propagation"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 59,
    "title": "Option Propagation in Rust",
    "slug": "option-propagation",
    "short_description": "Learn how to propagate `Option` values in a clean and idiomatic way.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["error handling", "Option type", "propagation"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 60,
    "title": "Result to Option",
    "slug": "result-to-option",
    "short_description": "Learn how to handle `Result` from an I/O operation and convert it to `Option`.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["error handling", "Result type", "Option type", "I/O"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 61,
    "title": "Option to Result",
    "slug": "option-to-result",
    "short_description": "Learn how to convert an `Option<T>` to a `Result<T, E>` in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["error handling", "Option type", "Result type", "conversion"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 62,
    "title": "Panic",
    "slug": "panic",
    "short_description": "Learn to handle unrecoverable errors in Rust using `panic!`.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["error handling", "panic", "environment variables"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 63,
    "title": "unwrap and expect",
    "slug": "unwrap-and-expect",
    "short_description": "Learn to handle unrecoverable errors in Rust using `unwrap` and `expect` with function calls.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["error handling", "unwrap", "expect", "file io"],
    "created_at": "2025-01-01T00:00:00Z",
    "updated_at": "2025-01-01T00:00:00Z"
  },
  {
    "id": 64,
    "title": "Traits",
    "slug": "traits",
    "short_description": "Implement and use traits to define shared behavior in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["traits", "polymorphism", "basics"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 65,
    "title": "Generics",
    "slug": "generics",
    "short_description": "Use generics with traits to create reusable and flexible code.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["generics", "traits", "reusability", "polymorphism"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 66,
    "title": "Trait Bounds",
    "slug": "trait-bounds",
    "short_description": "Use trait bounds to constrain generic types in Rust.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["traits", "generics", "trait bounds"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 67,
    "title": "The AsRef Trait",
    "slug": "the-as-ref-trait",
    "short_description": "Implement a function that uses the AsRef trait to work seamlessly with borrowed string types.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "Into", "generics"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 6,
    "title": "The From trait",
    "slug": "the-from-trait",
    "short_description": "Implement the From trait for a custom type.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "generics", "From"],
    "created_at": "2024-04-30T00:00:00Z",
    "updated_at": "2024-04-30T00:00:00Z"
  },
  {
    "id": 68,
    "title": "Returning impl Trait",
    "slug": "return-impl-trait",
    "short_description": "Use `impl Trait` syntax to return an iterator that filters strings starting with a keyword.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["iterators", "impl Trait", "rust"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 69,
    "title": "Return Trait Objects",
    "slug": "return-trait-objects",
    "short_description": "Learn to create and return trait objects in Rust using Box<dyn Trait>.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "polymorphism", "trait objects"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 70,
    "title": "Trait Objects",
    "slug": "trait-objects",
    "short_description": "Learn how to use trait objects as fields in structs for dynamic behavior in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "polymorphism", "structs", "dynamic behavior"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 71,
    "title": "Associated types",
    "slug": "associated-types",
    "short_description": "Implement a trait with associated types in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "associated types"],
    "created_at": "2025-01-03T00:00:00Z",
    "updated_at": "2025-01-03T00:00:00Z"
  },
  {
    "id": 72,
    "title": "Supertraits",
    "slug": "supertraits",
    "short_description": "Implement a trait that requires another trait in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "supertraits"],
    "created_at": "2025-01-03T00:00:00Z",
    "updated_at": "2025-01-03T00:00:00Z"
  },
  {
    "id": 73,
    "title": "Plugin System",
    "slug": "plugin-system",
    "short_description": "Design a plugin system using Rust's trait objects.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "RUST_BASICS",
    "tags": [
      "traits",
      "object safety",
      "plugin architecture",
      "dynamic dispatch"
    ],
    "created_at": "2025-01-03T00:00:00Z",
    "updated_at": "2025-01-03T00:00:00Z"
  },
  {
    "id": 74,
    "title": "Lifetimes",
    "slug": "lifetimes",
    "short_description": "Understand and implement lifetimes in Rust to ensure memory safety.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["lifetimes", "ownership", "references"],
    "created_at": "2025-01-02T00:00:00Z",
    "updated_at": "2025-01-02T00:00:00Z"
  },
  {
    "id": 75,
    "title": "Structs and references",
    "slug": "structs-and-references",
    "short_description": "Create a struct that holds a reference and performs keyword searches in a string slice.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["lifetimes", "structs", "references"],
    "created_at": "2025-01-03T00:00:00Z",
    "updated_at": "2025-01-03T00:00:00Z"
  },
  {
    "id": 76,
    "title": "Mutable Struct References",
    "slug": "mutable-struct-references",
    "short_description": "Implement a struct that holds a mutable reference to a String and modifies its content.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["lifetimes", "structs", "mutable references"],
    "created_at": "2025-01-03T00:00:00Z",
    "updated_at": "2025-01-03T00:00:00Z"
  },
  {
    "id": 32,
    "title": "Closures",
    "slug": "closures",
    "short_description": "Learn how to define and use closures in Rust.",
    "language": "RUST",
    "difficulty": "BEGINNER",
    "track": "RUST_BASICS",
    "tags": ["closures", "basics"],
    "created_at": "2024-06-12T00:00:00Z",
    "updated_at": "2024-06-12T00:00:00Z"
  },
  {
    "id": 77,
    "title": "Closure Types",
    "slug": "closure-types",
    "short_description": "Understand and define closure types in Rust with practical examples.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["closures", "types", "functions"],
    "created_at": "2025-01-04T00:00:00Z",
    "updated_at": "2025-01-04T00:00:00Z"
  },
  {
    "id": 78,
    "title": "Iterators",
    "slug": "iterators",
    "short_description": "Learn to work with Rust iterators by implementing filtering and transformation operations.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["iterators", "functional programming", "collections"],
    "created_at": "2025-01-04T00:00:00Z",
    "updated_at": "2025-01-04T00:00:00Z"
  },
  {
    "id": 79,
    "title": "Unique Items",
    "slug": "unique-items",
    "short_description": "Use Rust iterators to filter and collect unique items from a collection.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["iterators", "collections", "filtering"],
    "created_at": "2025-01-04T00:00:00Z",
    "updated_at": "2025-01-04T00:00:00Z"
  },
  {
    "id": 80,
    "title": "Box<T>",
    "slug": "box-t",
    "short_description": "Understand and use Box<T> to allocate values on the heap.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["box", "heap allocation", "smart pointers", "deref", "structs"],
    "created_at": "2025-01-08T00:00:00Z",
    "updated_at": "2025-01-08T00:00:00Z"
  },
  {
    "id": 81,
    "title": "The Drop Trait",
    "slug": "the-drop-trait",
    "short_description": "Implement custom behavior for a struct when it goes out of scope using the Drop trait.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["drop", "traits", "RAII"],
    "created_at": "2025-01-08T00:00:00Z",
    "updated_at": "2025-01-08T00:00:00Z"
  },
  {
    "id": 82,
    "title": "Rc<T>",
    "slug": "rc",
    "short_description": "Explore reference-counted smart pointers in Rust using Rc<T> to share data.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["smart pointers", "Rc", "shared ownership"],
    "created_at": "2025-01-10T00:00:00Z",
    "updated_at": "2025-01-10T00:00:00Z"
  },
  {
    "id": 83,
    "title": "Interior Mutability",
    "slug": "interior-mutability",
    "short_description": "Understand and utilize interior mutability in Rust using Rc and RefCell.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["Rc", "RefCell", "Interior Mutability", "Smart Pointers"],
    "created_at": "2025-01-10T00:00:00Z",
    "updated_at": "2025-01-10T00:00:00Z"
  },
  {
    "id": 84,
    "title": "Concurrency",
    "slug": "concurrency",
    "short_description": "Use threads to mutate a shared vector with non-deterministic ordering.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["threads", "concurrency", "synchronization"],
    "created_at": "2025-01-10T00:00:00Z",
    "updated_at": "2025-01-10T00:00:00Z"
  },
  {
    "id": 85,
    "title": "Channels",
    "slug": "channels",
    "short_description": "Learn how to communicate between threads using Rust's mpsc channels.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["threads", "channels", "mpsc", "concurrency"],
    "created_at": "2025-01-11T00:00:00Z",
    "updated_at": "2025-01-11T00:00:00Z"
  },
  {
    "id": 86,
    "title": "Shared State Concurrency",
    "slug": "shared-state-concurrency",
    "short_description": "Implement and manage shared state in concurrent programming using threads and Mutex in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["concurrency", "mutex", "threads", "shared state"],
    "created_at": "2025-01-11T00:00:00Z",
    "updated_at": "2025-01-11T00:00:00Z"
  },
  {
    "id": 87,
    "title": "Advanced Match Patterns",
    "slug": "advanced-match-patterns",
    "short_description": "Utilize Rust's advanced pattern matching capabilities to destructure complex data.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "RUST_BASICS",
    "tags": ["match", "pattern matching", "advanced"],
    "created_at": "2025-01-11T00:00:00Z",
    "updated_at": "2025-01-11T00:00:00Z"
  },
  {
    "id": 88,
    "title": "Advanced Traits",
    "slug": "advanced-traits",
    "short_description": "Implement and use advanced trait functionalities in Rust.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": ["traits", "type system", "operator overloading"],
    "created_at": "2025-01-12T00:00:00Z",
    "updated_at": "2025-01-12T00:00:00Z"
  },
  {
    "id": 89,
    "title": "Macros",
    "slug": "macros",
    "short_description": "Create a basic macro in Rust to demonstrate its functionality.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "RUST_BASICS",
    "tags": ["macros", "meta-programming"],
    "created_at": "2025-01-12T00:00:00Z",
    "updated_at": "2025-01-12T00:00:00Z"
  },
  {
    "id": 4,
    "title": "Fizz Buzz",
    "slug": "fizz-buzz",
    "short_description": "Write a program that prints 'Fizz' for multiples of three, 'Buzz' for multiples of five, and 'FizzBuzz' for multiples of both.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 5,
    "title": "Fibonacci",
    "slug": "fibonacci",
    "short_description": "Write a function that returns the nth number in the Fibonacci sequence.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-04-20T00:00:00Z",
    "updated_at": "2024-04-20T00:00:00Z"
  },
  {
    "id": 14,
    "title": "Is Prime",
    "slug": "is-prime",
    "short_description": "Implement a function to check if a number is prime using logical operators and conditional statements.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "CONTROL_FLOW",
    "tags": [
      "primes",
      "number theory",
      "logical operators",
      "conditional statements"
    ],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 15,
    "title": "Determine Number Characteristics",
    "slug": "determine-number-characteristics",
    "short_description": "Implement a function to describe if a number is positive, negative, or zero, and if it is even or odd.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": ["conditions", "logical operators", "control flow"],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 16,
    "title": "Factorial Calculator",
    "slug": "factorial-calculator",
    "short_description": "Implement a function to calculate the factorial of a non-negative integer using early returns and loops.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-06-02T00:00:00Z",
    "updated_at": "2024-06-02T00:00:00Z"
  },
  {
    "id": 17,
    "title": "Temperature Converter",
    "slug": "temperature-converter",
    "short_description": "Implement a temperature converter that handles various units and errors.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "CONTROL_FLOW",
    "tags": ["conversion", "error handling", "conditionals"],
    "created_at": "2024-06-03T00:00:00Z",
    "updated_at": "2024-06-03T00:00:00Z"
  },
  {
    "id": 18,
    "title": "Validate User Input",
    "slug": "validate-user-input",
    "short_description": "Implement early returns in Rust to validate user input for age and email.",
    "language": "RUST",
    "difficulty": "EASY",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-06-03T00:00:00Z",
    "updated_at": "2024-06-03T00:00:00Z"
  },
  {
    "id": 8,
    "title": "Median and mode",
    "slug": "median-and-mode",
    "short_description": "Write a program that calculates the median and mode of a list of numbers.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "CONTROL_FLOW",
    "tags": [],
    "created_at": "2024-05-03T00:00:00Z",
    "updated_at": "2024-05-03T00:00:00Z"
  },
  {
    "id": 7,
    "title": "Animal sanctuary registry",
    "slug": "animal-sanctuary-registry",
    "short_description": "Create a program that manages a registry of animals in a sanctuary.",
    "language": "RUST",
    "difficulty": "MEDIUM",
    "track": "RUST_BASICS",
    "tags": [],
    "created_at": "2024-04-30T00:00:00Z",
    "updated_at": "2024-04-30T00:00:00Z"
  },
  {
    "id": 19,
    "title": "Find the First Palindrome",
    "slug": "find-the-first-palindrome",
    "short_description": "Implement a function to find the first palindrome number in a range using any control flow construct.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "palindrome"],
    "created_at": "2024-06-05T00:00:00Z",
    "updated_at": "2024-06-05T00:00:00Z"
  },
  {
    "id": 20,
    "title": "Finite State Automaton",
    "slug": "finite-state-automaton",
    "short_description": "Implement a finite state automaton (FSA) to recognize a specific pattern in a sequence of characters.",
    "language": "RUST",
    "difficulty": "HARD",
    "track": "CONTROL_FLOW",
    "tags": ["pattern recognition", "automata theory", "control flow"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  },
  {
    "id": 21,
    "title": "Maze Solver",
    "slug": "maze-solver",
    "short_description": "Implement a maze solver using control flow in Rust to navigate through a maze represented as a grid.",
    "language": "RUST",
    "difficulty": "ADVANCED",
    "track": "CONTROL_FLOW",
    "tags": ["control flow", "algorithms", "path-finding"],
    "created_at": "2024-06-07T00:00:00Z",
    "updated_at": "2024-06-07T00:00:00Z"
  }
]
